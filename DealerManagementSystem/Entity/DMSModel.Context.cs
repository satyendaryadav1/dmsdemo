//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DealerManagementSystem.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DMSEntities : DbContext
    {
        public DMSEntities()
            : base("name=DMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tabel1> Tabel1 { get; set; }
        public virtual DbSet<tblAccount> tblAccounts { get; set; }
        public virtual DbSet<tblAddresslField> tblAddresslFields { get; set; }
        public virtual DbSet<tblAddressType> tblAddressTypes { get; set; }
        public virtual DbSet<tblAssigneditem> tblAssigneditems { get; set; }
        public virtual DbSet<tblAssigneditemsVendor> tblAssigneditemsVendors { get; set; }
        public virtual DbSet<tblAssignedlineitem> tblAssignedlineitems { get; set; }
        public virtual DbSet<tblAssignedlineitemsVendor> tblAssignedlineitemsVendors { get; set; }
        public virtual DbSet<tblAssignTaxGroup> tblAssignTaxGroups { get; set; }
        public virtual DbSet<tblCalculatordataType> tblCalculatordataTypes { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblCustomerDetail> tblCustomerDetails { get; set; }
        public virtual DbSet<tblCustomerTran> tblCustomerTrans { get; set; }
        public virtual DbSet<tblCustTransOpen> tblCustTransOpens { get; set; }
        public virtual DbSet<tblDiscountGroupHeader> tblDiscountGroupHeaders { get; set; }
        public virtual DbSet<tblDiscountGroupLine> tblDiscountGroupLines { get; set; }
        public virtual DbSet<tblDiscountGroupLineTemp> tblDiscountGroupLineTemps { get; set; }
        public virtual DbSet<tblEntity> tblEntities { get; set; }
        public virtual DbSet<tblFielddatatype> tblFielddatatypes { get; set; }
        public virtual DbSet<tblFieldsetup> tblFieldsetups { get; set; }
        public virtual DbSet<tblFieldsetupvalue> tblFieldsetupvalues { get; set; }
        public virtual DbSet<tblFileSequenceHead> tblFileSequenceHeads { get; set; }
        public virtual DbSet<tblFileSequenceline> tblFileSequencelines { get; set; }
        public virtual DbSet<tblFilter> tblFilters { get; set; }
        public virtual DbSet<tblGroup> tblGroups { get; set; }
        public virtual DbSet<tblGroupHeader> tblGroupHeaders { get; set; }
        public virtual DbSet<tblInvoice> tblInvoices { get; set; }
        public virtual DbSet<tblInvoiceAttachment> tblInvoiceAttachments { get; set; }
        public virtual DbSet<tblInvoiceAttachmentVendor> tblInvoiceAttachmentVendors { get; set; }
        public virtual DbSet<tblInvoiceComponent> tblInvoiceComponents { get; set; }
        public virtual DbSet<tblInvoiceLine> tblInvoiceLines { get; set; }
        public virtual DbSet<tblInvoiceLineVendor> tblInvoiceLineVendors { get; set; }
        public virtual DbSet<tblinvoiceVendor> tblinvoiceVendors { get; set; }
        public virtual DbSet<tblItem> tblItems { get; set; }
        public virtual DbSet<tblLegalFieldHeader> tblLegalFieldHeaders { get; set; }
        public virtual DbSet<tblLegalTaxField> tblLegalTaxFields { get; set; }
        public virtual DbSet<tblMember> tblMembers { get; set; }
        public virtual DbSet<tblMst_Status> tblMst_Status { get; set; }
        public virtual DbSet<tblmstAccountType> tblmstAccountTypes { get; set; }
        public virtual DbSet<tblMstaddresstable> tblMstaddresstables { get; set; }
        public virtual DbSet<tblMstbaseunit> tblMstbaseunits { get; set; }
        public virtual DbSet<tblMstCurrency> tblMstCurrencies { get; set; }
        public virtual DbSet<tblMstCustType> tblMstCustTypes { get; set; }
        public virtual DbSet<tblmstCustVendType> tblmstCustVendTypes { get; set; }
        public virtual DbSet<tblMstdateformat> tblMstdateformats { get; set; }
        public virtual DbSet<tblMstDiscountItemType> tblMstDiscountItemTypes { get; set; }
        public virtual DbSet<tblmstDiscountLineId> tblmstDiscountLineIds { get; set; }
        public virtual DbSet<tblMstDiscountPartnerType> tblMstDiscountPartnerTypes { get; set; }
        public virtual DbSet<tblmstDiscountvendorType> tblmstDiscountvendorTypes { get; set; }
        public virtual DbSet<tblMstItem> tblMstItems { get; set; }
        public virtual DbSet<tblMstitem1> tblMstitems1 { get; set; }
        public virtual DbSet<tblMstItemSKU> tblMstItemSKUs { get; set; }
        public virtual DbSet<tblmstitemtype> tblmstitemtypes { get; set; }
        public virtual DbSet<tblMstOrganizationDataType> tblMstOrganizationDataTypes { get; set; }
        public virtual DbSet<tblmstOrgLocationTable> tblmstOrgLocationTables { get; set; }
        public virtual DbSet<tblMstOrgOtherParameterTable> tblMstOrgOtherParameterTables { get; set; }
        public virtual DbSet<tblMstOtherunit> tblMstOtherunits { get; set; }
        public virtual DbSet<tblMstpage> tblMstpages { get; set; }
        public virtual DbSet<tblMstPagestatu> tblMstPagestatus { get; set; }
        public virtual DbSet<tblMstPartnersetup> tblMstPartnersetups { get; set; }
        public virtual DbSet<tblMstPartnerStatu> tblMstPartnerStatus { get; set; }
        public virtual DbSet<tblMstPartnertype> tblMstPartnertypes { get; set; }
        public virtual DbSet<tblmstTaxState> tblmstTaxStates { get; set; }
        public virtual DbSet<tblMstTaxType> tblMstTaxTypes { get; set; }
        public virtual DbSet<tblMstTrans_Status> tblMstTrans_Status { get; set; }
        public virtual DbSet<tblMstTransactiontype> tblMstTransactiontypes { get; set; }
        public virtual DbSet<tblMstunitclass> tblMstunitclasses { get; set; }
        public virtual DbSet<tblMstunitconversion> tblMstunitconversions { get; set; }
        public virtual DbSet<tblMstunit> tblMstunits { get; set; }
        public virtual DbSet<tblMstUserType> tblMstUserTypes { get; set; }
        public virtual DbSet<tblmstVendorAddressTable> tblmstVendorAddressTables { get; set; }
        public virtual DbSet<tblOperator> tblOperators { get; set; }
        public virtual DbSet<tblOrgParameterField> tblOrgParameterFields { get; set; }
        public virtual DbSet<tblPagefield> tblPagefields { get; set; }
        public virtual DbSet<tblPartner> tblPartners { get; set; }
        public virtual DbSet<tblPartnerExistingLocation> tblPartnerExistingLocations { get; set; }
        public virtual DbSet<tblPartnerGroup> tblPartnerGroups { get; set; }
        public virtual DbSet<tblPartner1> tblPartners1 { get; set; }
        public virtual DbSet<tblPartnerTax> tblPartnerTaxes { get; set; }
        public virtual DbSet<tblRequisition> tblRequisitions { get; set; }
        public virtual DbSet<tblRequisitionItemDetail> tblRequisitionItemDetails { get; set; }
        public virtual DbSet<tblRequisitionItemWarehous> tblRequisitionItemWarehouses { get; set; }
        public virtual DbSet<tblSequencetype> tblSequencetypes { get; set; }
        public virtual DbSet<tblServiceLog> tblServiceLogs { get; set; }
        public virtual DbSet<tblTaxGroup> tblTaxGroups { get; set; }
        public virtual DbSet<tblTaxgroupformula> tblTaxgroupformulas { get; set; }
        public virtual DbSet<tblTaxInfoSubCompont> tblTaxInfoSubComponts { get; set; }
        public virtual DbSet<tblTaxSetup> tblTaxSetups { get; set; }
        public virtual DbSet<tblTaxSetupInformation> tblTaxSetupInformations { get; set; }
        public virtual DbSet<tblTaxtype> tblTaxtypes { get; set; }
        public virtual DbSet<tblTempTaxgroupformula> tblTempTaxgroupformulas { get; set; }
        public virtual DbSet<tbltemptaxtable> tbltemptaxtables { get; set; }
        public virtual DbSet<tbltest> tbltests { get; set; }
        public virtual DbSet<tbltestCOA> tbltestCOAs { get; set; }
        public virtual DbSet<tblTracking> tblTrackings { get; set; }
        public virtual DbSet<tblTrackingTran> tblTrackingTrans { get; set; }
        public virtual DbSet<tblTransactionflag> tblTransactionflags { get; set; }
        public virtual DbSet<tblTransaction> tblTransactions { get; set; }
        public virtual DbSet<tblUnitConversion> tblUnitConversions { get; set; }
        public virtual DbSet<tblUnit> tblUnits { get; set; }
        public virtual DbSet<tblUserLogin> tblUserLogins { get; set; }
        public virtual DbSet<tblVariant> tblVariants { get; set; }
        public virtual DbSet<tblVariantHeader> tblVariantHeaders { get; set; }
        public virtual DbSet<tblVendorAssigneditem> tblVendorAssigneditems { get; set; }
        public virtual DbSet<tblVendorAssignedlineitem> tblVendorAssignedlineitems { get; set; }
        public virtual DbSet<tblVendorGroup> tblVendorGroups { get; set; }
        public virtual DbSet<tblVendor> tblVendors { get; set; }
        public virtual DbSet<tblVendorTax> tblVendorTaxes { get; set; }
        public virtual DbSet<tblWareHouse> tblWareHouses { get; set; }
        public virtual DbSet<TblWebserviceUser> TblWebserviceUsers { get; set; }
        public virtual DbSet<tblZone> tblZones { get; set; }
        public virtual DbSet<tblZoneState> tblZoneStates { get; set; }
        public virtual DbSet<tblZonewiseItem> tblZonewiseItems { get; set; }
        public virtual DbSet<TempFileSequenceline> TempFileSequencelines { get; set; }
        public virtual DbSet<testtable> testtables { get; set; }
        public virtual DbSet<tblYoekisoftAddressIndia> tblYoekisoftAddressIndias { get; set; }
        public virtual DbSet<tblYoekisoftIndia_City> tblYoekisoftIndia_City { get; set; }
        public virtual DbSet<tblYoekisoftIndia_State> tblYoekisoftIndia_State { get; set; }
        public virtual DbSet<Taxgroupformula> Taxgroupformulas { get; set; }
    
        [DbFunction("DMSEntities", "fn_split_string_to_column")]
        public virtual IQueryable<fn_split_string_to_column_Result> fn_split_string_to_column(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_split_string_to_column_Result>("[DMSEntities].[fn_split_string_to_column](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("DMSEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[DMSEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        public virtual ObjectResult<AngularTest_Result> AngularTest(string queryType, string name, string mobile, string email, string password, Nullable<int> empid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("Empid", empid) :
                new ObjectParameter("Empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AngularTest_Result>("AngularTest", queryTypeParameter, nameParameter, mobileParameter, emailParameter, passwordParameter, empidParameter);
        }
    
        public virtual ObjectResult<DMS_AdminSetUp_Result> DMS_AdminSetUp(string queryType, Nullable<long> loadMore, string ddlvalue, Nullable<long> userId, Nullable<long> fieldid, Nullable<long> partnerId, Nullable<int> countryid, Nullable<int> entityid, Nullable<long> createdBy, Nullable<long> partnerType, string partnerName, string contact, string location, string tableName, string parameterId, Nullable<long> updatedBy, Nullable<long> dataType, string addressLineJson, string countryJson, string jsonData, string jsonFields, string searchValue, string columnName, string insertQuery, string checkExist, string selectQuery, Nullable<int> orgflag, string partid, string ta, string column)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var ddlvalueParameter = ddlvalue != null ?
                new ObjectParameter("ddlvalue", ddlvalue) :
                new ObjectParameter("ddlvalue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fieldidParameter = fieldid.HasValue ?
                new ObjectParameter("Fieldid", fieldid) :
                new ObjectParameter("Fieldid", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(long));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("entityid", entityid) :
                new ObjectParameter("entityid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var partnerTypeParameter = partnerType.HasValue ?
                new ObjectParameter("PartnerType", partnerType) :
                new ObjectParameter("PartnerType", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var parameterIdParameter = parameterId != null ?
                new ObjectParameter("parameterId", parameterId) :
                new ObjectParameter("parameterId", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var dataTypeParameter = dataType.HasValue ?
                new ObjectParameter("dataType", dataType) :
                new ObjectParameter("dataType", typeof(long));
    
            var addressLineJsonParameter = addressLineJson != null ?
                new ObjectParameter("AddressLineJson", addressLineJson) :
                new ObjectParameter("AddressLineJson", typeof(string));
    
            var countryJsonParameter = countryJson != null ?
                new ObjectParameter("CountryJson", countryJson) :
                new ObjectParameter("CountryJson", typeof(string));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var jsonFieldsParameter = jsonFields != null ?
                new ObjectParameter("JsonFields", jsonFields) :
                new ObjectParameter("JsonFields", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var insertQueryParameter = insertQuery != null ?
                new ObjectParameter("InsertQuery", insertQuery) :
                new ObjectParameter("InsertQuery", typeof(string));
    
            var checkExistParameter = checkExist != null ?
                new ObjectParameter("CheckExist", checkExist) :
                new ObjectParameter("CheckExist", typeof(string));
    
            var selectQueryParameter = selectQuery != null ?
                new ObjectParameter("SelectQuery", selectQuery) :
                new ObjectParameter("SelectQuery", typeof(string));
    
            var orgflagParameter = orgflag.HasValue ?
                new ObjectParameter("Orgflag", orgflag) :
                new ObjectParameter("Orgflag", typeof(int));
    
            var partidParameter = partid != null ?
                new ObjectParameter("Partid", partid) :
                new ObjectParameter("Partid", typeof(string));
    
            var taParameter = ta != null ?
                new ObjectParameter("ta", ta) :
                new ObjectParameter("ta", typeof(string));
    
            var columnParameter = column != null ?
                new ObjectParameter("column", column) :
                new ObjectParameter("column", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_AdminSetUp_Result>("DMS_AdminSetUp", queryTypeParameter, loadMoreParameter, ddlvalueParameter, userIdParameter, fieldidParameter, partnerIdParameter, countryidParameter, entityidParameter, createdByParameter, partnerTypeParameter, partnerNameParameter, contactParameter, locationParameter, tableNameParameter, parameterIdParameter, updatedByParameter, dataTypeParameter, addressLineJsonParameter, countryJsonParameter, jsonDataParameter, jsonFieldsParameter, searchValueParameter, columnNameParameter, insertQueryParameter, checkExistParameter, selectQueryParameter, orgflagParameter, partidParameter, taParameter, columnParameter);
        }
    
        public virtual ObjectResult<DMS_AllItems_Result> DMS_AllItems(string queryType, Nullable<long> loadMore, Nullable<long> updatedBy, string jsonData, string searchValue)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_AllItems_Result>("DMS_AllItems", queryTypeParameter, loadMoreParameter, updatedByParameter, jsonDataParameter, searchValueParameter);
        }
    
        public virtual int DMS_BINDCALCULATOR(string json, Nullable<long> taxGroupId, Nullable<long> subCompId, Nullable<long> taxState, string queryType)
        {
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var taxGroupIdParameter = taxGroupId.HasValue ?
                new ObjectParameter("TaxGroupId", taxGroupId) :
                new ObjectParameter("TaxGroupId", typeof(long));
    
            var subCompIdParameter = subCompId.HasValue ?
                new ObjectParameter("SubCompId", subCompId) :
                new ObjectParameter("SubCompId", typeof(long));
    
            var taxStateParameter = taxState.HasValue ?
                new ObjectParameter("TaxState", taxState) :
                new ObjectParameter("TaxState", typeof(long));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMS_BINDCALCULATOR", jsonParameter, taxGroupIdParameter, subCompIdParameter, taxStateParameter, queryTypeParameter);
        }
    
        public virtual int Dms_BindLine(Nullable<long> groupId, Nullable<long> assignType)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(long));
    
            var assignTypeParameter = assignType.HasValue ?
                new ObjectParameter("AssignType", assignType) :
                new ObjectParameter("AssignType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dms_BindLine", groupIdParameter, assignTypeParameter);
        }
    
        public virtual ObjectResult<DMS_COASetup_Result> DMS_COASetup(string queryType, Nullable<long> loadMore, Nullable<int> countryid, Nullable<int> entityid, string jsondata, string searchvalue, string accountId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var jsondataParameter = jsondata != null ?
                new ObjectParameter("Jsondata", jsondata) :
                new ObjectParameter("Jsondata", typeof(string));
    
            var searchvalueParameter = searchvalue != null ?
                new ObjectParameter("searchvalue", searchvalue) :
                new ObjectParameter("searchvalue", typeof(string));
    
            var accountIdParameter = accountId != null ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_COASetup_Result>("DMS_COASetup", queryTypeParameter, loadMoreParameter, countryidParameter, entityidParameter, jsondataParameter, searchvalueParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<DMS_Customers_Result> DMS_Customers(string queryType, Nullable<long> loadMore, Nullable<long> userId, Nullable<long> countryId, Nullable<long> entityId, Nullable<long> vendorId, string custType, string groupName, string description, Nullable<long> updatedBy, string parameterId, string jsonData, string jsonFields, string searchValue, string query, string taxJson, string tableName, string columnName, Nullable<long> createdBy, string partnerCode, string partnerName, string partnerRepresentative, Nullable<long> partnerType, Nullable<long> groupId, Nullable<long> accountId, Nullable<long> partnerId, Nullable<long> partnerStatus, Nullable<long> partnerGroup, string partId, string insertQuery, string existingLocation)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("entityId", entityId) :
                new ObjectParameter("entityId", typeof(long));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(long));
    
            var custTypeParameter = custType != null ?
                new ObjectParameter("CustType", custType) :
                new ObjectParameter("CustType", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var parameterIdParameter = parameterId != null ?
                new ObjectParameter("parameterId", parameterId) :
                new ObjectParameter("parameterId", typeof(string));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var jsonFieldsParameter = jsonFields != null ?
                new ObjectParameter("JsonFields", jsonFields) :
                new ObjectParameter("JsonFields", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            var taxJsonParameter = taxJson != null ?
                new ObjectParameter("TaxJson", taxJson) :
                new ObjectParameter("TaxJson", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var partnerCodeParameter = partnerCode != null ?
                new ObjectParameter("PartnerCode", partnerCode) :
                new ObjectParameter("PartnerCode", typeof(string));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerRepresentativeParameter = partnerRepresentative != null ?
                new ObjectParameter("PartnerRepresentative", partnerRepresentative) :
                new ObjectParameter("PartnerRepresentative", typeof(string));
    
            var partnerTypeParameter = partnerType.HasValue ?
                new ObjectParameter("PartnerType", partnerType) :
                new ObjectParameter("PartnerType", typeof(long));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(long));
    
            var partnerStatusParameter = partnerStatus.HasValue ?
                new ObjectParameter("PartnerStatus", partnerStatus) :
                new ObjectParameter("PartnerStatus", typeof(long));
    
            var partnerGroupParameter = partnerGroup.HasValue ?
                new ObjectParameter("PartnerGroup", partnerGroup) :
                new ObjectParameter("PartnerGroup", typeof(long));
    
            var partIdParameter = partId != null ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(string));
    
            var insertQueryParameter = insertQuery != null ?
                new ObjectParameter("InsertQuery", insertQuery) :
                new ObjectParameter("InsertQuery", typeof(string));
    
            var existingLocationParameter = existingLocation != null ?
                new ObjectParameter("ExistingLocation", existingLocation) :
                new ObjectParameter("ExistingLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Customers_Result>("DMS_Customers", queryTypeParameter, loadMoreParameter, userIdParameter, countryIdParameter, entityIdParameter, vendorIdParameter, custTypeParameter, groupNameParameter, descriptionParameter, updatedByParameter, parameterIdParameter, jsonDataParameter, jsonFieldsParameter, searchValueParameter, queryParameter, taxJsonParameter, tableNameParameter, columnNameParameter, createdByParameter, partnerCodeParameter, partnerNameParameter, partnerRepresentativeParameter, partnerTypeParameter, groupIdParameter, accountIdParameter, partnerIdParameter, partnerStatusParameter, partnerGroupParameter, partIdParameter, insertQueryParameter, existingLocationParameter);
        }
    
        public virtual ObjectResult<DMS_DiscountSetup_Result> DMS_DiscountSetup(string queryType, Nullable<long> countryid, Nullable<long> loaddata, Nullable<int> entityid, Nullable<long> createdBy, Nullable<long> updatedBy, string jsonData, string lineJson, Nullable<long> itemid, Nullable<long> loadMore, Nullable<long> discountgrpId, string itemType, Nullable<long> userId, Nullable<long> typeFlag)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(long));
    
            var loaddataParameter = loaddata.HasValue ?
                new ObjectParameter("loaddata", loaddata) :
                new ObjectParameter("loaddata", typeof(long));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var lineJsonParameter = lineJson != null ?
                new ObjectParameter("LineJson", lineJson) :
                new ObjectParameter("LineJson", typeof(string));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("Itemid", itemid) :
                new ObjectParameter("Itemid", typeof(long));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var discountgrpIdParameter = discountgrpId.HasValue ?
                new ObjectParameter("discountgrpId", discountgrpId) :
                new ObjectParameter("discountgrpId", typeof(long));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("itemType", itemType) :
                new ObjectParameter("itemType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var typeFlagParameter = typeFlag.HasValue ?
                new ObjectParameter("TypeFlag", typeFlag) :
                new ObjectParameter("TypeFlag", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_DiscountSetup_Result>("DMS_DiscountSetup", queryTypeParameter, countryidParameter, loaddataParameter, entityidParameter, createdByParameter, updatedByParameter, jsonDataParameter, lineJsonParameter, itemidParameter, loadMoreParameter, discountgrpIdParameter, itemTypeParameter, userIdParameter, typeFlagParameter);
        }
    
        public virtual int DMS_FINALCALCULATOR(string taxjson, string json, Nullable<int> taxstate, Nullable<int> taxtype, Nullable<int> taxgroupid, Nullable<decimal> totalamount, string queryType, string tempTaxjson, Nullable<System.DateTime> date)
        {
            var taxjsonParameter = taxjson != null ?
                new ObjectParameter("Taxjson", taxjson) :
                new ObjectParameter("Taxjson", typeof(string));
    
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var taxstateParameter = taxstate.HasValue ?
                new ObjectParameter("Taxstate", taxstate) :
                new ObjectParameter("Taxstate", typeof(int));
    
            var taxtypeParameter = taxtype.HasValue ?
                new ObjectParameter("Taxtype", taxtype) :
                new ObjectParameter("Taxtype", typeof(int));
    
            var taxgroupidParameter = taxgroupid.HasValue ?
                new ObjectParameter("Taxgroupid", taxgroupid) :
                new ObjectParameter("Taxgroupid", typeof(int));
    
            var totalamountParameter = totalamount.HasValue ?
                new ObjectParameter("Totalamount", totalamount) :
                new ObjectParameter("Totalamount", typeof(decimal));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var tempTaxjsonParameter = tempTaxjson != null ?
                new ObjectParameter("TempTaxjson", tempTaxjson) :
                new ObjectParameter("TempTaxjson", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMS_FINALCALCULATOR", taxjsonParameter, jsonParameter, taxstateParameter, taxtypeParameter, taxgroupidParameter, totalamountParameter, queryTypeParameter, tempTaxjsonParameter, dateParameter);
        }
    
        public virtual int DMS_FINALCALCULATORINCLUSIVE(string taxjson, string json, Nullable<int> taxstate, Nullable<int> taxtype, Nullable<int> taxgroupid, Nullable<decimal> totalamountWithout, Nullable<decimal> totalamountwith, string queryType, string tempTaxjson, Nullable<System.DateTime> date)
        {
            var taxjsonParameter = taxjson != null ?
                new ObjectParameter("Taxjson", taxjson) :
                new ObjectParameter("Taxjson", typeof(string));
    
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var taxstateParameter = taxstate.HasValue ?
                new ObjectParameter("Taxstate", taxstate) :
                new ObjectParameter("Taxstate", typeof(int));
    
            var taxtypeParameter = taxtype.HasValue ?
                new ObjectParameter("Taxtype", taxtype) :
                new ObjectParameter("Taxtype", typeof(int));
    
            var taxgroupidParameter = taxgroupid.HasValue ?
                new ObjectParameter("Taxgroupid", taxgroupid) :
                new ObjectParameter("Taxgroupid", typeof(int));
    
            var totalamountWithoutParameter = totalamountWithout.HasValue ?
                new ObjectParameter("TotalamountWithout", totalamountWithout) :
                new ObjectParameter("TotalamountWithout", typeof(decimal));
    
            var totalamountwithParameter = totalamountwith.HasValue ?
                new ObjectParameter("Totalamountwith", totalamountwith) :
                new ObjectParameter("Totalamountwith", typeof(decimal));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var tempTaxjsonParameter = tempTaxjson != null ?
                new ObjectParameter("TempTaxjson", tempTaxjson) :
                new ObjectParameter("TempTaxjson", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMS_FINALCALCULATORINCLUSIVE", taxjsonParameter, jsonParameter, taxstateParameter, taxtypeParameter, taxgroupidParameter, totalamountWithoutParameter, totalamountwithParameter, queryTypeParameter, tempTaxjsonParameter, dateParameter);
        }
    
        public virtual ObjectResult<string> DMS_GETAUTOGENERATENo(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DMS_GETAUTOGENERATENo", queryTypeParameter);
        }
    
        public virtual int Dms_GetDiscount(Nullable<long> itemid, Nullable<long> partnerId, Nullable<System.DateTime> date, Nullable<long> countryId, Nullable<long> entityId)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("partnerId", partnerId) :
                new ObjectParameter("partnerId", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dms_GetDiscount", itemidParameter, partnerIdParameter, dateParameter, countryIdParameter, entityIdParameter);
        }
    
        public virtual int Dms_GetDiscountPurchase(Nullable<long> itemid, Nullable<long> partnerId, Nullable<System.DateTime> date, Nullable<long> countryId, Nullable<long> entityId)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("partnerId", partnerId) :
                new ObjectParameter("partnerId", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dms_GetDiscountPurchase", itemidParameter, partnerIdParameter, dateParameter, countryIdParameter, entityIdParameter);
        }
    
        public virtual ObjectResult<DMS_GetItemMaster_Result> DMS_GetItemMaster(string queryType, string iTEMId, string userType, Nullable<long> skuId, Nullable<long> locationId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var iTEMIdParameter = iTEMId != null ?
                new ObjectParameter("ITEMId", iTEMId) :
                new ObjectParameter("ITEMId", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var skuIdParameter = skuId.HasValue ?
                new ObjectParameter("SkuId", skuId) :
                new ObjectParameter("SkuId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_GetItemMaster_Result>("DMS_GetItemMaster", queryTypeParameter, iTEMIdParameter, userTypeParameter, skuIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DMS_InsertRequisition(string queryType, string requestNumber, string createdBy, string requestedDate, string wareHouseId, string submittedDate, string status, string jsonRequestionItems, string jsonUpdateRequestItems, string updatedBy, string requisitionId, Nullable<long> loadMore)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var requestNumberParameter = requestNumber != null ?
                new ObjectParameter("RequestNumber", requestNumber) :
                new ObjectParameter("RequestNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var requestedDateParameter = requestedDate != null ?
                new ObjectParameter("RequestedDate", requestedDate) :
                new ObjectParameter("RequestedDate", typeof(string));
    
            var wareHouseIdParameter = wareHouseId != null ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(string));
    
            var submittedDateParameter = submittedDate != null ?
                new ObjectParameter("SubmittedDate", submittedDate) :
                new ObjectParameter("SubmittedDate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var jsonRequestionItemsParameter = jsonRequestionItems != null ?
                new ObjectParameter("JsonRequestionItems", jsonRequestionItems) :
                new ObjectParameter("JsonRequestionItems", typeof(string));
    
            var jsonUpdateRequestItemsParameter = jsonUpdateRequestItems != null ?
                new ObjectParameter("JsonUpdateRequestItems", jsonUpdateRequestItems) :
                new ObjectParameter("JsonUpdateRequestItems", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var requisitionIdParameter = requisitionId != null ?
                new ObjectParameter("RequisitionId", requisitionId) :
                new ObjectParameter("RequisitionId", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("loadMore", loadMore) :
                new ObjectParameter("loadMore", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DMS_InsertRequisition", queryTypeParameter, requestNumberParameter, createdByParameter, requestedDateParameter, wareHouseIdParameter, submittedDateParameter, statusParameter, jsonRequestionItemsParameter, jsonUpdateRequestItemsParameter, updatedByParameter, requisitionIdParameter, loadMoreParameter);
        }
    
        public virtual ObjectResult<DMS_Item_Result> DMS_Item(string queryType, Nullable<int> countryid, Nullable<int> entityid, Nullable<long> createdBy, Nullable<long> updatedBy, Nullable<long> unitclass, string jsonData, string itemJson, string baseUnit, string skuJson, string unit, string otherUnitJson, string convertedvalueJson, Nullable<long> itemsid, Nullable<long> itemIddbl, Nullable<long> loadMore)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var unitclassParameter = unitclass.HasValue ?
                new ObjectParameter("Unitclass", unitclass) :
                new ObjectParameter("Unitclass", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var itemJsonParameter = itemJson != null ?
                new ObjectParameter("ItemJson", itemJson) :
                new ObjectParameter("ItemJson", typeof(string));
    
            var baseUnitParameter = baseUnit != null ?
                new ObjectParameter("BaseUnit", baseUnit) :
                new ObjectParameter("BaseUnit", typeof(string));
    
            var skuJsonParameter = skuJson != null ?
                new ObjectParameter("SkuJson", skuJson) :
                new ObjectParameter("SkuJson", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var otherUnitJsonParameter = otherUnitJson != null ?
                new ObjectParameter("OtherUnitJson", otherUnitJson) :
                new ObjectParameter("OtherUnitJson", typeof(string));
    
            var convertedvalueJsonParameter = convertedvalueJson != null ?
                new ObjectParameter("ConvertedvalueJson", convertedvalueJson) :
                new ObjectParameter("ConvertedvalueJson", typeof(string));
    
            var itemsidParameter = itemsid.HasValue ?
                new ObjectParameter("Itemsid", itemsid) :
                new ObjectParameter("Itemsid", typeof(long));
    
            var itemIddblParameter = itemIddbl.HasValue ?
                new ObjectParameter("ItemIddbl", itemIddbl) :
                new ObjectParameter("ItemIddbl", typeof(long));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Item_Result>("DMS_Item", queryTypeParameter, countryidParameter, entityidParameter, createdByParameter, updatedByParameter, unitclassParameter, jsonDataParameter, itemJsonParameter, baseUnitParameter, skuJsonParameter, unitParameter, otherUnitJsonParameter, convertedvalueJsonParameter, itemsidParameter, itemIddblParameter, loadMoreParameter);
        }
    
        public virtual ObjectResult<DMS_ItemSetup_Result> DMS_ItemSetup(string queryType, Nullable<int> countryid, Nullable<int> entityid, Nullable<long> createdBy, Nullable<long> updatedBy, string jsonData, Nullable<long> loadMore)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_ItemSetup_Result>("DMS_ItemSetup", queryTypeParameter, countryidParameter, entityidParameter, createdByParameter, updatedByParameter, jsonDataParameter, loadMoreParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DMS_Login(string queryType, string emailid, string password, string passwordKey, Nullable<long> userId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DMS_Login", queryTypeParameter, emailidParameter, passwordParameter, passwordKeyParameter, userIdParameter);
        }
    
        public virtual ObjectResult<DMS_Onhand_Result> DMS_Onhand(string queryType, Nullable<long> loadMore, string custType, Nullable<long> updatedBy, string jsonData, string searchValue)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var custTypeParameter = custType != null ?
                new ObjectParameter("CustType", custType) :
                new ObjectParameter("CustType", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Onhand_Result>("DMS_Onhand", queryTypeParameter, loadMoreParameter, custTypeParameter, updatedByParameter, jsonDataParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<DMS_PurchaseInvoice_Result> DMS_PurchaseInvoice(string queryType, Nullable<long> entityId, Nullable<long> countryId, string partnerId, string locationId, string invoicedatajson, string itemDataJson, string attachFileJson, Nullable<long> loadMore, Nullable<long> userId, Nullable<long> invoiceId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var partnerIdParameter = partnerId != null ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var invoicedatajsonParameter = invoicedatajson != null ?
                new ObjectParameter("Invoicedatajson", invoicedatajson) :
                new ObjectParameter("Invoicedatajson", typeof(string));
    
            var itemDataJsonParameter = itemDataJson != null ?
                new ObjectParameter("ItemDataJson", itemDataJson) :
                new ObjectParameter("ItemDataJson", typeof(string));
    
            var attachFileJsonParameter = attachFileJson != null ?
                new ObjectParameter("AttachFileJson", attachFileJson) :
                new ObjectParameter("AttachFileJson", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_PurchaseInvoice_Result>("DMS_PurchaseInvoice", queryTypeParameter, entityIdParameter, countryIdParameter, partnerIdParameter, locationIdParameter, invoicedatajsonParameter, itemDataJsonParameter, attachFileJsonParameter, loadMoreParameter, userIdParameter, invoiceIdParameter);
        }
    
        public virtual ObjectResult<DMS_RequestControl_Result> DMS_RequestControl(string queryType, string searchValue, string requisitionId, Nullable<long> loadMore, Nullable<long> updatedBy, string itemId, Nullable<long> wareHouseId, string jsonRequestionItems, string jsonRequestionWarehouse, Nullable<long> requestDetId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var requisitionIdParameter = requisitionId != null ?
                new ObjectParameter("RequisitionId", requisitionId) :
                new ObjectParameter("RequisitionId", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("loadMore", loadMore) :
                new ObjectParameter("loadMore", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var itemIdParameter = itemId != null ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(string));
    
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("wareHouseId", wareHouseId) :
                new ObjectParameter("wareHouseId", typeof(long));
    
            var jsonRequestionItemsParameter = jsonRequestionItems != null ?
                new ObjectParameter("JsonRequestionItems", jsonRequestionItems) :
                new ObjectParameter("JsonRequestionItems", typeof(string));
    
            var jsonRequestionWarehouseParameter = jsonRequestionWarehouse != null ?
                new ObjectParameter("JsonRequestionWarehouse", jsonRequestionWarehouse) :
                new ObjectParameter("JsonRequestionWarehouse", typeof(string));
    
            var requestDetIdParameter = requestDetId.HasValue ?
                new ObjectParameter("RequestDetId", requestDetId) :
                new ObjectParameter("RequestDetId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_RequestControl_Result>("DMS_RequestControl", queryTypeParameter, searchValueParameter, requisitionIdParameter, loadMoreParameter, updatedByParameter, itemIdParameter, wareHouseIdParameter, jsonRequestionItemsParameter, jsonRequestionWarehouseParameter, requestDetIdParameter);
        }
    
        public virtual ObjectResult<DMS_SaleInvoice_Result> DMS_SaleInvoice(string queryType, Nullable<long> entityId, Nullable<long> countryId, string partnerId, string locationId, string invoicedatajson, string itemDataJson, string attachFileJson, Nullable<long> loadMore, Nullable<long> userId, Nullable<long> invoiceId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var partnerIdParameter = partnerId != null ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var invoicedatajsonParameter = invoicedatajson != null ?
                new ObjectParameter("Invoicedatajson", invoicedatajson) :
                new ObjectParameter("Invoicedatajson", typeof(string));
    
            var itemDataJsonParameter = itemDataJson != null ?
                new ObjectParameter("ItemDataJson", itemDataJson) :
                new ObjectParameter("ItemDataJson", typeof(string));
    
            var attachFileJsonParameter = attachFileJson != null ?
                new ObjectParameter("AttachFileJson", attachFileJson) :
                new ObjectParameter("AttachFileJson", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_SaleInvoice_Result>("DMS_SaleInvoice", queryTypeParameter, entityIdParameter, countryIdParameter, partnerIdParameter, locationIdParameter, invoicedatajsonParameter, itemDataJsonParameter, attachFileJsonParameter, loadMoreParameter, userIdParameter, invoiceIdParameter);
        }
    
        public virtual ObjectResult<DMS_Sequenesetup_Result> DMS_Sequenesetup(string queryType, Nullable<long> loadMore, string custType, Nullable<long> updatedBy, string jsonData, string searchValue, Nullable<long> seqflag, Nullable<int> pageid, Nullable<int> fieldid, Nullable<int> entityid, Nullable<int> countryid, Nullable<long> seqId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var custTypeParameter = custType != null ?
                new ObjectParameter("CustType", custType) :
                new ObjectParameter("CustType", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var seqflagParameter = seqflag.HasValue ?
                new ObjectParameter("Seqflag", seqflag) :
                new ObjectParameter("Seqflag", typeof(long));
    
            var pageidParameter = pageid.HasValue ?
                new ObjectParameter("Pageid", pageid) :
                new ObjectParameter("Pageid", typeof(int));
    
            var fieldidParameter = fieldid.HasValue ?
                new ObjectParameter("Fieldid", fieldid) :
                new ObjectParameter("Fieldid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var seqIdParameter = seqId.HasValue ?
                new ObjectParameter("seqId", seqId) :
                new ObjectParameter("seqId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Sequenesetup_Result>("DMS_Sequenesetup", queryTypeParameter, loadMoreParameter, custTypeParameter, updatedByParameter, jsonDataParameter, searchValueParameter, seqflagParameter, pageidParameter, fieldidParameter, entityidParameter, countryidParameter, seqIdParameter);
        }
    
        public virtual ObjectResult<DMS_Taxgroupsetup_Result> DMS_Taxgroupsetup(string queryType, Nullable<int> countryid, Nullable<long> parentId, Nullable<long> taxState, string jsonTempData, string fromdate, string todate, Nullable<long> loadmore, Nullable<long> taxGroup, Nullable<long> updatedBy)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(long));
    
            var taxStateParameter = taxState.HasValue ?
                new ObjectParameter("TaxState", taxState) :
                new ObjectParameter("TaxState", typeof(long));
    
            var jsonTempDataParameter = jsonTempData != null ?
                new ObjectParameter("JsonTempData", jsonTempData) :
                new ObjectParameter("JsonTempData", typeof(string));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var loadmoreParameter = loadmore.HasValue ?
                new ObjectParameter("loadmore", loadmore) :
                new ObjectParameter("loadmore", typeof(long));
    
            var taxGroupParameter = taxGroup.HasValue ?
                new ObjectParameter("TaxGroup", taxGroup) :
                new ObjectParameter("TaxGroup", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Taxgroupsetup_Result>("DMS_Taxgroupsetup", queryTypeParameter, countryidParameter, parentIdParameter, taxStateParameter, jsonTempDataParameter, fromdateParameter, todateParameter, loadmoreParameter, taxGroupParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<DMS_TaxSetup_Result> DMS_TaxSetup(string queryType, Nullable<long> loadMore, Nullable<long> userId, Nullable<long> fieldid, Nullable<long> partnerId, Nullable<int> countryid, Nullable<int> entityid, Nullable<int> taxType, Nullable<long> taxGroupIddblClick, Nullable<int> taxFieldId, Nullable<long> createdBy, Nullable<long> partnerType, string partnerName, string contact, string location, string tableName, string jsonTempData, Nullable<long> updatedBy, string addressLineJson, string countryJson, string jsonData, string jsonFields, string searchValue, string columnName, string insertQuery, string checkExist, string selectQuery, Nullable<long> legalHeadId, string subcomponent)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fieldidParameter = fieldid.HasValue ?
                new ObjectParameter("Fieldid", fieldid) :
                new ObjectParameter("Fieldid", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(long));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("entityid", entityid) :
                new ObjectParameter("entityid", typeof(int));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(int));
    
            var taxGroupIddblClickParameter = taxGroupIddblClick.HasValue ?
                new ObjectParameter("TaxGroupIddblClick", taxGroupIddblClick) :
                new ObjectParameter("TaxGroupIddblClick", typeof(long));
    
            var taxFieldIdParameter = taxFieldId.HasValue ?
                new ObjectParameter("TaxFieldId", taxFieldId) :
                new ObjectParameter("TaxFieldId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var partnerTypeParameter = partnerType.HasValue ?
                new ObjectParameter("PartnerType", partnerType) :
                new ObjectParameter("PartnerType", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var jsonTempDataParameter = jsonTempData != null ?
                new ObjectParameter("JsonTempData", jsonTempData) :
                new ObjectParameter("JsonTempData", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var addressLineJsonParameter = addressLineJson != null ?
                new ObjectParameter("AddressLineJson", addressLineJson) :
                new ObjectParameter("AddressLineJson", typeof(string));
    
            var countryJsonParameter = countryJson != null ?
                new ObjectParameter("CountryJson", countryJson) :
                new ObjectParameter("CountryJson", typeof(string));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var jsonFieldsParameter = jsonFields != null ?
                new ObjectParameter("JsonFields", jsonFields) :
                new ObjectParameter("JsonFields", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var insertQueryParameter = insertQuery != null ?
                new ObjectParameter("InsertQuery", insertQuery) :
                new ObjectParameter("InsertQuery", typeof(string));
    
            var checkExistParameter = checkExist != null ?
                new ObjectParameter("CheckExist", checkExist) :
                new ObjectParameter("CheckExist", typeof(string));
    
            var selectQueryParameter = selectQuery != null ?
                new ObjectParameter("SelectQuery", selectQuery) :
                new ObjectParameter("SelectQuery", typeof(string));
    
            var legalHeadIdParameter = legalHeadId.HasValue ?
                new ObjectParameter("LegalHeadId", legalHeadId) :
                new ObjectParameter("LegalHeadId", typeof(long));
    
            var subcomponentParameter = subcomponent != null ?
                new ObjectParameter("Subcomponent", subcomponent) :
                new ObjectParameter("Subcomponent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_TaxSetup_Result>("DMS_TaxSetup", queryTypeParameter, loadMoreParameter, userIdParameter, fieldidParameter, partnerIdParameter, countryidParameter, entityidParameter, taxTypeParameter, taxGroupIddblClickParameter, taxFieldIdParameter, createdByParameter, partnerTypeParameter, partnerNameParameter, contactParameter, locationParameter, tableNameParameter, jsonTempDataParameter, updatedByParameter, addressLineJsonParameter, countryJsonParameter, jsonDataParameter, jsonFieldsParameter, searchValueParameter, columnNameParameter, insertQueryParameter, checkExistParameter, selectQueryParameter, legalHeadIdParameter, subcomponentParameter);
        }
    
        public virtual ObjectResult<DMS_Transaction_Result> DMS_Transaction(string queryType, Nullable<long> loadMore, Nullable<long> itemId, string accountNo, string transJson, string transtrackJson, Nullable<int> statusId, Nullable<int> countryid, Nullable<int> entityid, Nullable<int> locationId, string partid, string assigneditemid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var transJsonParameter = transJson != null ?
                new ObjectParameter("TransJson", transJson) :
                new ObjectParameter("TransJson", typeof(string));
    
            var transtrackJsonParameter = transtrackJson != null ?
                new ObjectParameter("TranstrackJson", transtrackJson) :
                new ObjectParameter("TranstrackJson", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var partidParameter = partid != null ?
                new ObjectParameter("Partid", partid) :
                new ObjectParameter("Partid", typeof(string));
    
            var assigneditemidParameter = assigneditemid != null ?
                new ObjectParameter("Assigneditemid", assigneditemid) :
                new ObjectParameter("Assigneditemid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Transaction_Result>("DMS_Transaction", queryTypeParameter, loadMoreParameter, itemIdParameter, accountNoParameter, transJsonParameter, transtrackJsonParameter, statusIdParameter, countryidParameter, entityidParameter, locationIdParameter, partidParameter, assigneditemidParameter);
        }
    
        public virtual ObjectResult<DMS_Transactions_Result> DMS_Transactions(string queryType, Nullable<int> countryid, Nullable<int> entityid, Nullable<long> createdBy, Nullable<long> updatedBy, string jsonData, Nullable<long> itemid, Nullable<long> loadMore, string tableName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("jsonData", jsonData) :
                new ObjectParameter("jsonData", typeof(string));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("Itemid", itemid) :
                new ObjectParameter("Itemid", typeof(long));
    
            var loadMoreParameter = loadMore.HasValue ?
                new ObjectParameter("LoadMore", loadMore) :
                new ObjectParameter("LoadMore", typeof(long));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DMS_Transactions_Result>("DMS_Transactions", queryTypeParameter, countryidParameter, entityidParameter, createdByParameter, updatedByParameter, jsonDataParameter, itemidParameter, loadMoreParameter, tableNameParameter);
        }
    
        public virtual int DMS_UserSetup(string queryType, string emailid, string password, string passwordKey, Nullable<long> userId, Nullable<long> userTypeId, Nullable<long> entityId, Nullable<long> countryId, Nullable<long> loaddata, string searchvalue, string partId, string passKey, string entityDataJson)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var loaddataParameter = loaddata.HasValue ?
                new ObjectParameter("loaddata", loaddata) :
                new ObjectParameter("loaddata", typeof(long));
    
            var searchvalueParameter = searchvalue != null ?
                new ObjectParameter("searchvalue", searchvalue) :
                new ObjectParameter("searchvalue", typeof(string));
    
            var partIdParameter = partId != null ?
                new ObjectParameter("partId", partId) :
                new ObjectParameter("partId", typeof(string));
    
            var passKeyParameter = passKey != null ?
                new ObjectParameter("passKey", passKey) :
                new ObjectParameter("passKey", typeof(string));
    
            var entityDataJsonParameter = entityDataJson != null ?
                new ObjectParameter("EntityDataJson", entityDataJson) :
                new ObjectParameter("EntityDataJson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMS_UserSetup", queryTypeParameter, emailidParameter, passwordParameter, passwordKeyParameter, userIdParameter, userTypeIdParameter, entityIdParameter, countryIdParameter, loaddataParameter, searchvalueParameter, partIdParameter, passKeyParameter, entityDataJsonParameter);
        }
    
        public virtual int DMSBindSequence(Nullable<int> pageid, Nullable<int> fieldid, Nullable<int> countryid, Nullable<int> entityid, string queryType)
        {
            var pageidParameter = pageid.HasValue ?
                new ObjectParameter("Pageid", pageid) :
                new ObjectParameter("Pageid", typeof(int));
    
            var fieldidParameter = fieldid.HasValue ?
                new ObjectParameter("Fieldid", fieldid) :
                new ObjectParameter("Fieldid", typeof(int));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("Countryid", countryid) :
                new ObjectParameter("Countryid", typeof(int));
    
            var entityidParameter = entityid.HasValue ?
                new ObjectParameter("Entityid", entityid) :
                new ObjectParameter("Entityid", typeof(int));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMSBindSequence", pageidParameter, fieldidParameter, countryidParameter, entityidParameter, queryTypeParameter);
        }
    
        public virtual int DMSTestBindSequence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DMSTestBindSequence");
        }
    
        public virtual ObjectResult<ENTITYTEST_Result> ENTITYTEST(string queryType, string employeename, Nullable<int> supervisorid, string supervisorname)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var employeenameParameter = employeename != null ?
                new ObjectParameter("Employeename", employeename) :
                new ObjectParameter("Employeename", typeof(string));
    
            var supervisoridParameter = supervisorid.HasValue ?
                new ObjectParameter("Supervisorid", supervisorid) :
                new ObjectParameter("Supervisorid", typeof(int));
    
            var supervisornameParameter = supervisorname != null ?
                new ObjectParameter("Supervisorname", supervisorname) :
                new ObjectParameter("Supervisorname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ENTITYTEST_Result>("ENTITYTEST", queryTypeParameter, employeenameParameter, supervisoridParameter, supervisornameParameter);
        }
    
        public virtual ObjectResult<Sp_AxWebserviceIntegration_Result> Sp_AxWebserviceIntegration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AxWebserviceIntegration_Result>("Sp_AxWebserviceIntegration");
        }
    
        public virtual int sp_LinkedService(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LinkedService", queryTypeParameter);
        }
    
        public virtual int sp_ServiceLog(string logDescription)
        {
            var logDescriptionParameter = logDescription != null ?
                new ObjectParameter("LogDescription", logDescription) :
                new ObjectParameter("LogDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceLog", logDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_test(string queryType, string name, string code, Nullable<double> price, Nullable<double> id, string xmlAile)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(double));
    
            var xmlAileParameter = xmlAile != null ?
                new ObjectParameter("XmlAile", xmlAile) :
                new ObjectParameter("XmlAile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_test", queryTypeParameter, nameParameter, codeParameter, priceParameter, idParameter, xmlAileParameter);
        }
    
        public virtual int TAXVALUEFINALCALCULATOR(Nullable<int> resultsetloop, Nullable<int> taxgroupid)
        {
            var resultsetloopParameter = resultsetloop.HasValue ?
                new ObjectParameter("resultsetloop", resultsetloop) :
                new ObjectParameter("resultsetloop", typeof(int));
    
            var taxgroupidParameter = taxgroupid.HasValue ?
                new ObjectParameter("Taxgroupid", taxgroupid) :
                new ObjectParameter("Taxgroupid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TAXVALUEFINALCALCULATOR", resultsetloopParameter, taxgroupidParameter);
        }
    
        public virtual int TESTCALCULATOR(string json, Nullable<long> taxGroupId, Nullable<long> subCompId, Nullable<long> taxState)
        {
            var jsonParameter = json != null ?
                new ObjectParameter("Json", json) :
                new ObjectParameter("Json", typeof(string));
    
            var taxGroupIdParameter = taxGroupId.HasValue ?
                new ObjectParameter("TaxGroupId", taxGroupId) :
                new ObjectParameter("TaxGroupId", typeof(long));
    
            var subCompIdParameter = subCompId.HasValue ?
                new ObjectParameter("SubCompId", subCompId) :
                new ObjectParameter("SubCompId", typeof(long));
    
            var taxStateParameter = taxState.HasValue ?
                new ObjectParameter("TaxState", taxState) :
                new ObjectParameter("TaxState", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TESTCALCULATOR", jsonParameter, taxGroupIdParameter, subCompIdParameter, taxStateParameter);
        }
    
        public virtual int TestFINALCALCULATOR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TestFINALCALCULATOR");
        }
    
        public virtual int TestFINALCALCULATORINCLUSIVE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TestFINALCALCULATORINCLUSIVE");
        }
    }
}
